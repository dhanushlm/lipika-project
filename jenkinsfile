pipeline {
    agent any

    environment {
        DOCKERHUB_USER = 'dhanushlm'
        DOCKERHUB_PASS = credentials('dockerhub-credentials')  // Jenkins credential ID
        IMAGE_NAME = 'auth-service'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "Cloning repository..."
                git branch: 'develop', url: 'https://github.com/dhanushlm/lipika-project.git'
            }
        }

        stage('Testing Maven') {
            steps {
                echo "Testing..."
                sh 'mvn test'
            }
        }

        stage('Build Maven Artifact') {
            steps {
                echo "Building JAR file..."
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }

        stage('Push to DockerHub') {
            steps {
                echo "Pushing Docker image to DockerHub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh 'echo $PASS | docker login -u $USER --password-stdin'
                    sh "docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying to Kubernetes cluster..."
                sh '''
                kubectl set image deployment/auth-deployment auth-container=${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
                kubectl rollout status deployment/auth-deployment
                '''
            }
        }
    }

    post {
        success {
            echo "Build #${env.BUILD_NUMBER} completed successfully!"
        }
        failure {
            echo "Build failed. Please check logs."
        }
    }
}

